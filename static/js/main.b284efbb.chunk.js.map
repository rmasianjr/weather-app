{"version":3,"sources":["helper/iconGenerator.js","components/WeatherIcon/WeatherIcon.js","components/Weather/Weather.js","components/ConvertControl/ConvertControl.js","components/Loading/Loading.js","components/Modal/Modal.js","components/Footer/Footer.js","components/LocationInput/LocationInput.js","helper/converter.js","components/App.js","helper/getLocation.js","helper/checkTempMeasurement.js","serviceWorker.js","index.js"],"names":["getIcon","weatherStatus","time","hour","iconStr","today","concat","replace","WeatherIcon","_ref","status","description","timeInHour","react_default","a","createElement","Fragment","className","Weather","weatherData","temperature","unit","place","components_WeatherIcon_WeatherIcon","ConvertControl","convertTo","type","id","onChange","checked","htmlFor","data-temp-off","data-temp-on","Loading","Modal","error","runFallback","runTryAgain","errorContent","funcToRun","warnObj","title","style","errorObj","message","content","onClick","Footer","href","target","rel","initialState","address","geo","LocationInput","state","searchInput","React","createRef","handleOnChange","e","value","_this","setState","handlePlaceSelect","autocomplete","getPlace","geometry","lat","location","lon","lng","formatted_address","submitQuery","Error","name","this","google","maps","places","Autocomplete","current","setFields","addListener","_this$state","props","getLocationWeather","Object","objectSpread","_this$state2","q","ref","placeholder","Component","toFahrenheit","parseFloat","toFixed","toCelsius","App","isOpen","isFetching","checkGeolocation","navigator","Promise","resolve","reject","geolocation","getCurrentPosition","position","latitude","coords","longitude","resolveLocation","rejectLocation","then","catch","code","prevState","getLocationByIP","axios","get","res","_res$data","data","weatherEndpoint","timeEndpoint","process","weatherPromise","timePromise","all","values","setData","runFallBack","_data","slicedToArray","weatherRes","timeRes","main","sys","weather","formatted","countryName","test","temp","country","parseInt","split","components_LocationInput_LocationInput","components_Modal_Modal","components_Loading_Loading","components_Weather_Weather","components_ConvertControl_ConvertControl","components_Footer_Footer","Boolean","window","hostname","match","ReactDOM","render","components_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b284efbb.chunk.js","sourcesContent":["function checkTime(hour) {\r\n  if (hour < 6 || hour > 17) {\r\n    return 'night-alt';\r\n  }\r\n  return 'day';\r\n}\r\n\r\nexport function getIcon(weatherStatus, time) {\r\n  const today = checkTime(time);\r\n  let iconStr;\r\n\r\n  switch (weatherStatus) {\r\n    case 'Clear':\r\n      iconStr = today === 'day' ? 'day-sunny' : 'night-clear';\r\n      break;\r\n    case 'Clouds':\r\n      iconStr = `${today}-cloudy`;\r\n      break;\r\n    case 'Rain':\r\n      iconStr = `${today}-rain`;\r\n      break;\r\n    case 'Snow':\r\n      iconStr = `${today}-snow`;\r\n      break;\r\n    case 'Drizzle':\r\n      iconStr = `${today}-sprinkle`;\r\n      break;\r\n    case 'Thunderstorm':\r\n      iconStr = `${today}-thunderstorm`;\r\n      break;\r\n    case 'Fog':\r\n      iconStr = `${today.replace(/-alt$/, '')}-fog`;\r\n      break;\r\n    case 'Haze':\r\n    case 'Mist':\r\n    case 'Dust':\r\n      iconStr = 'dust';\r\n      break;\r\n    case 'Extreme':\r\n      iconStr = 'tornado';\r\n      break;\r\n    default:\r\n      iconStr = 'cloud';\r\n      break;\r\n  }\r\n\r\n  return iconStr;\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './WeatherIcon.css';\r\nimport { getIcon } from '../../helper/iconGenerator';\r\n\r\nconst WeatherIcon = ({ status, description, timeInHour }) => (\r\n  <React.Fragment>\r\n    <p className=\"icon-weather\">\r\n      <i className={`wi wi-${getIcon(status, timeInHour)}`} />\r\n    </p>\r\n    <p className=\"icon-description\">{description}</p>\r\n  </React.Fragment>\r\n);\r\n\r\nWeatherIcon.propTypes = {\r\n  status: PropTypes.string.isRequired,\r\n  description: PropTypes.string.isRequired,\r\n  timeInHour: PropTypes.number.isRequired\r\n};\r\n\r\nexport default WeatherIcon;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport WeatherIcon from '../WeatherIcon/WeatherIcon';\r\nimport './Weather.css';\r\n\r\nconst Weather = ({ weatherData, temperature, unit }) => {\r\n  const { status, description, place, timeInHour } = weatherData;\r\n\r\n  return (\r\n    <div className=\"weather-data\">\r\n      <WeatherIcon\r\n        status={status}\r\n        description={description}\r\n        timeInHour={timeInHour}\r\n      />\r\n      <div className=\"search-icon\" />\r\n      <div className=\"weather-marker\" />\r\n      <p className=\"weather-data-place\">{place}</p>\r\n      <p className=\"weather-data-temp\">\r\n        {temperature}\r\n        {unit === 'celsius' ? '° C' : '° F'}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nWeather.propTypes = {\r\n  weatherData: PropTypes.shape({\r\n    status: PropTypes.string.isRequired,\r\n    description: PropTypes.string.isRequired,\r\n    place: PropTypes.string.isRequired,\r\n    timeInHour: PropTypes.number.isRequired\r\n  }),\r\n  temperature: PropTypes.string.isRequired,\r\n  unit: PropTypes.oneOf(['celsius', 'fahrenheit']).isRequired\r\n};\r\n\r\nexport default Weather;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './ConvertControl.css';\r\n\r\nconst ConvertControl = ({ convertTo, unit }) => (\r\n  <div className=\"con-ctrl\">\r\n    <input\r\n      className=\"con-ctrl-switch\"\r\n      type=\"checkbox\"\r\n      id=\"convert\"\r\n      onChange={convertTo}\r\n      checked={unit === 'fahrenheit' ? true : false}\r\n    />\r\n    <label\r\n      className=\"toggle-switch\"\r\n      htmlFor=\"convert\"\r\n      data-temp-off=\"Fahrenheit\"\r\n      data-temp-on=\"Celsius\"\r\n    />\r\n  </div>\r\n);\r\n\r\nConvertControl.propTypes = {\r\n  convertTo: PropTypes.func.isRequired,\r\n  unit: PropTypes.oneOf(['celsius', 'fahrenheit'])\r\n};\r\n\r\nexport default ConvertControl;\r\n","import React from 'react';\r\nimport './Loading.css';\r\n\r\nconst Loading = () => <div className=\"spinner\" />;\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Modal.css';\r\n\r\nconst Modal = ({ error, runFallback, runTryAgain }) => {\r\n  const { errorContent, type } = error;\r\n\r\n  const funcToRun = type !== 'warn' ? runTryAgain : runFallback;\r\n\r\n  const warnObj = {\r\n    title: 'Warning',\r\n    description: (\r\n      <p>\r\n        As a fallback, it will use the user <strong>IP Address</strong> to get\r\n        the location and weather status.\r\n      </p>\r\n    ),\r\n    style: 'warn'\r\n  };\r\n\r\n  const errorObj = {\r\n    title: 'Error',\r\n    description: <p>{errorContent.message}</p>,\r\n    style: 'danger'\r\n  };\r\n\r\n  const content = type === 'warn' ? warnObj : errorObj;\r\n\r\n  return (\r\n    <div className=\"modal\">\r\n      <div className={`modal-container modal-container-${content.style}`}>\r\n        <header className={`modal-header modal-header-${content.style}`}>\r\n          <h4>\r\n            {content.title}:{' '}\r\n            {type === 'warn' && (\r\n              <span className=\"modal-header-message\">\r\n                {errorContent.message}\r\n              </span>\r\n            )}\r\n          </h4>\r\n        </header>\r\n        <div className={`modal-content modal-content-${content.style}`}>\r\n          {content.description}\r\n          {type === 'warn' && (\r\n            <span>Note: it will give inaccurate result.</span>\r\n          )}\r\n        </div>\r\n        <button\r\n          className={`modal-button modal-button-${content.style}`}\r\n          onClick={funcToRun}\r\n        >\r\n          {type === 'warn' ? 'Ok' : 'Try Again'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nModal.propTypes = {\r\n  error: PropTypes.shape({\r\n    errorContent: PropTypes.object.isRequired,\r\n    type: PropTypes.string.isRequired\r\n  }).isRequired,\r\n  runFallback: PropTypes.func.isRequired,\r\n  runTryAgain: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\nimport './Footer.css';\r\n\r\nconst Footer = () => (\r\n  <footer className=\"footer\">\r\n    <p>\r\n      Created by:{' '}\r\n      <a\r\n        href=\"https://twitter.com/rmasianjr\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        Ricardo Masian Jr.\r\n      </a>\r\n      <span>&mdash;</span>\r\n      <a\r\n        href=\"https://github.com/rmasianjr/weather-app\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        View code\r\n      </a>\r\n    </p>\r\n    <p>\r\n      <span>\r\n        API:{' '}\r\n        <a\r\n          href=\"https://fcc-weather-api.glitch.me/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          fcc-weather-api\r\n        </a>{' '}\r\n        /{' '}\r\n        <a href=\"https://ipapi.co/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          ipapi\r\n        </a>{' '}\r\n        /{' '}\r\n        <a\r\n          href=\"https://timezonedb.com/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          timezonedb\r\n        </a>{' '}\r\n        /{' '}\r\n        <a\r\n          href=\"https://developers.google.com/maps/documentation/javascript/places-autocomplete\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          googlemaps autocomplete\r\n        </a>\r\n      </span>\r\n    </p>\r\n    <p>\r\n      Weather Icons:{' '}\r\n      <a\r\n        href=\"https://erikflowers.github.io/weather-icons/\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        erikflowers\r\n      </a>\r\n    </p>\r\n  </footer>\r\n);\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './LocationInput.css';\r\n\r\nconst initialState = { address: '', geo: null, error: null };\r\n\r\nclass LocationInput extends Component {\r\n  state = { ...initialState };\r\n\r\n  searchInput = React.createRef();\r\n\r\n  static propTypes = {\r\n    getLocationWeather: PropTypes.func.isRequired\r\n  };\r\n\r\n  componentDidMount() {\r\n    /*global google*/\r\n    /* the above code is required when using google variable*/\r\n\r\n    this.autocomplete = new google.maps.places.Autocomplete(\r\n      this.searchInput.current\r\n    );\r\n    this.autocomplete.setFields(['formatted_address', 'geometry']);\r\n    this.autocomplete.addListener('place_changed', this.handlePlaceSelect);\r\n  }\r\n\r\n  handleOnChange = e => {\r\n    const value = e.target.value;\r\n    this.setState(() => ({\r\n      address: value,\r\n      error: null\r\n    }));\r\n  };\r\n\r\n  handlePlaceSelect = () => {\r\n    const place = this.autocomplete.getPlace();\r\n\r\n    if (!place.geometry) {\r\n      const error = new Error(`No details available for input \"${place.name}\"`);\r\n      this.setState(() => ({ error }));\r\n      return;\r\n    }\r\n\r\n    const geo = {\r\n      lat: place.geometry.location.lat(),\r\n      lon: place.geometry.location.lng()\r\n    };\r\n\r\n    this.setState(() => ({\r\n      address: place.formatted_address,\r\n      geo\r\n    }));\r\n\r\n    this.submitQuery();\r\n  };\r\n\r\n  submitQuery() {\r\n    const { geo, address } = this.state;\r\n    this.props.getLocationWeather(geo.lat, geo.lon, address);\r\n    this.setState(() => ({ ...initialState }));\r\n  }\r\n\r\n  render() {\r\n    const { address, error } = this.state;\r\n    return (\r\n      <div className=\"search-container\">\r\n        <div className=\"search-icon\" />\r\n        <input\r\n          className=\"search-input\"\r\n          type=\"search\"\r\n          q=\"locationsearch\"\r\n          ref={this.searchInput}\r\n          placeholder=\"Enter a Location\"\r\n          onChange={this.handleOnChange}\r\n          value={address}\r\n        />\r\n        {error && <span>{error.message}</span>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LocationInput;\r\n","const toFahrenheit = temperature =>\r\n  (parseFloat(temperature) * (9 / 5) + 32).toFixed(1);\r\n\r\nconst toCelsius = temperature =>\r\n  ((parseFloat(temperature) - 32) * (5 / 9)).toFixed(1);\r\n\r\nexport { toFahrenheit, toCelsius };\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Weather from './Weather/Weather';\r\nimport ConvertControl from './ConvertControl/ConvertControl';\r\nimport Loading from './Loading/Loading';\r\nimport Modal from './Modal/Modal';\r\nimport Footer from './Footer/Footer';\r\nimport LocationInput from './LocationInput/LocationInput';\r\nimport { toFahrenheit, toCelsius } from '../helper/converter.js';\r\nimport { getLocation } from '../helper/getLocation';\r\nimport { checkTempMeasurement } from '../helper/checkTempMeasurement';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    weatherData: null,\r\n    temperature: null,\r\n    unit: null,\r\n    error: null,\r\n    isOpen: false,\r\n    isFetching: true\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.checkGeolocation();\r\n  }\r\n\r\n  checkGeolocation = () => {\r\n    if ('geolocation' in navigator) {\r\n      getLocation()\r\n        .then(coords =>\r\n          this.getLocationWeather(coords.latitude, coords.longitude)\r\n        )\r\n        .catch(error => {\r\n          const type = error.code === 1 ? 'warn' : 'fetch';\r\n          this.setState(prevState => ({\r\n            error: {\r\n              errorContent: error,\r\n              type\r\n            },\r\n            isOpen: !prevState.isOpen\r\n          }));\r\n        });\r\n    } else {\r\n      const error = new Error('Geolocation is not supported by this browser');\r\n      this.setState(prevState => ({\r\n        error: {\r\n          errorContent: error,\r\n          type: 'warn'\r\n        },\r\n        isOpen: !prevState.isOpen\r\n      }));\r\n    }\r\n  };\r\n\r\n  getLocationByIP = () => {\r\n    const endpoint = 'https://ipapi.co/json/';\r\n    axios\r\n      .get(endpoint)\r\n      .then(res => {\r\n        const { latitude, longitude } = res.data;\r\n        this.getLocationWeather(latitude, longitude);\r\n      })\r\n      .catch(error => {\r\n        this.setState(prevState => ({\r\n          error: {\r\n            errorContent: error,\r\n            type: 'fetch'\r\n          },\r\n          isOpen: !prevState.isOpen\r\n        }));\r\n      });\r\n  };\r\n\r\n  getLocationWeather = (latitude, longitude, location) => {\r\n    const weatherEndpoint = `https://fcc-weather-api.glitch.me/api/current?lat=${latitude}&lon=${longitude}`;\r\n    const timeEndpoint = `https://api.timezonedb.com/v2.1/get-time-zone?key=${\r\n      process.env.REACT_APP_TIMEZONEDB_KEY\r\n    }&format=json&by=position&lat=${latitude}&lng=${longitude}`;\r\n\r\n    const weatherPromise = axios.get(weatherEndpoint).then(res => res.data);\r\n    const timePromise = axios.get(timeEndpoint).then(res => res.data);\r\n\r\n    this.setState(() => ({\r\n      isFetching: true\r\n    }));\r\n\r\n    Promise.all([weatherPromise, timePromise])\r\n      .then(values => this.setData(values, location))\r\n      .catch(error => {\r\n        this.setState(prevState => ({\r\n          error: {\r\n            errorContent: error,\r\n            type: 'fetch'\r\n          },\r\n          isOpen: !prevState.isOpen\r\n        }));\r\n      });\r\n  };\r\n\r\n  setData(data, location) {\r\n    const [weatherRes, timeRes] = data;\r\n    const { main, name, sys, weather } = weatherRes;\r\n    const { formatted, countryName } = timeRes;\r\n\r\n    let unit, temperature;\r\n    const usesFahrenheit = checkTempMeasurement(countryName);\r\n    if (usesFahrenheit) {\r\n      unit = 'fahrenheit';\r\n      temperature = toFahrenheit(main.temp.toFixed(1));\r\n    } else {\r\n      unit = 'celsius';\r\n      temperature = main.temp.toFixed(1);\r\n    }\r\n\r\n    const weatherData = {\r\n      status: weather[0].main,\r\n      description: weather[0].description,\r\n      place: location ? location : `${name}, ${sys.country}`,\r\n      timeInHour: parseInt(formatted.split(' ')[1].split(':')[0]) // get hour\r\n    };\r\n\r\n    this.setState(prevState => ({\r\n      weatherData,\r\n      temperature,\r\n      unit,\r\n      isFetching: !prevState.isFetching\r\n    }));\r\n  }\r\n\r\n  convertTo = e => {\r\n    if (!e.target.checked) {\r\n      this.setState(prevState => ({\r\n        temperature: toCelsius(prevState.temperature),\r\n        unit: 'celsius'\r\n      }));\r\n    } else {\r\n      this.setState(prevState => ({\r\n        temperature: toFahrenheit(prevState.temperature),\r\n        unit: 'fahrenheit'\r\n      }));\r\n    }\r\n  };\r\n\r\n  runTryAgain = () => {\r\n    this.setState(prevState => ({\r\n      error: null,\r\n      isOpen: !prevState.isOpen\r\n    }));\r\n\r\n    this.checkGeolocation();\r\n  };\r\n\r\n  runFallBack = () => {\r\n    this.setState(prevState => ({\r\n      error: null,\r\n      isOpen: !prevState.isOpen\r\n    }));\r\n\r\n    this.getLocationByIP();\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      weatherData,\r\n      temperature,\r\n      unit,\r\n      isOpen,\r\n      error,\r\n      isFetching\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"app\">\r\n          <h1>Weather App</h1>\r\n          <div className=\"app-content\">\r\n            <LocationInput getLocationWeather={this.getLocationWeather} />\r\n            {error ? (\r\n              <Modal\r\n                error={error}\r\n                isOpen={isOpen}\r\n                runFallback={this.runFallBack}\r\n                runTryAgain={this.runTryAgain}\r\n              />\r\n            ) : isFetching ? (\r\n              <Loading />\r\n            ) : (\r\n              <div>\r\n                <Weather\r\n                  weatherData={weatherData}\r\n                  temperature={temperature}\r\n                  unit={unit}\r\n                />\r\n                <ConvertControl convertTo={this.convertTo} unit={unit} />\r\n              </div>\r\n            )}\r\n          </div>\r\n          <Footer />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","export function getLocation() {\r\n  return new Promise((resolve, reject) => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      position => resolve(resolveLocation(position)),\r\n      error => reject(rejectLocation(error))\r\n    );\r\n  });\r\n}\r\n\r\nfunction resolveLocation(position) {\r\n  const coords = {\r\n    latitude: position.coords.latitude,\r\n    longitude: position.coords.longitude\r\n  };\r\n  return coords;\r\n}\r\n\r\nfunction rejectLocation(error) {\r\n  return error;\r\n}\r\n","export function checkTempMeasurement(country) {\r\n  const fahrenheitCountries = /united states|bahamas|belize|cayman islands|palau|puerto rico|guam|u.s. virgin islands/i;\r\n  return fahrenheitCountries.test(country);\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}